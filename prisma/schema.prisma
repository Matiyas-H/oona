generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MessageStatus {
  READ
  UNREAD
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                      String                   @id @default(cuid())
  name                    String?
  email                   String?                  @unique
  emailVerified           DateTime?
  image                   String?
  createdAt               DateTime                 @default(now()) @map("created_at")
  updatedAt               DateTime                 @default(now()) @map("updated_at")
  role                    UserRole                 @default(USER)
  password                String?
  stripeCurrentPeriodEnd  DateTime?                @map("stripe_current_period_end")
  stripeCustomerId        String?                  @unique @map("stripe_customer_id")
  stripePriceId           String?                  @map("stripe_price_id")
  stripeSubscriptionId    String?                  @unique @map("stripe_subscription_id")
  accounts                Account[]
  sessions                Session[]
  userNumber              UserNumber?
  verifiedNumber          VerifiedNumber?
  notificationPreferences NotificationPreferences?
  aiConfigs               AIConfig[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Country {
  id        String       @id @default(cuid())
  code      String       @unique
  isoCode   String       @unique @map("iso_code")
  name      String
  active    Boolean      @default(true)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @default(now()) @map("updated_at")
  carriers  Carrier[]
  numbers   UserNumber[] @relation("CountryToUserNumber")

  @@map("countries")
}

model Carrier {
  id              String           @id @default(cuid())
  name            String
  countryId       String
  active          Boolean          @default(true)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @default(now()) @map("updated_at")
  country         Country          @relation(fields: [countryId], references: [id])
  forwardingCodes ForwardingCode[]
  userNumbers     UserNumber[]
  userServices    UserService[]

  @@unique([name, countryId])
  @@index([countryId])
  @@map("carriers")
}

model ForwardingCode {
  id               String        @id @default(cuid())
  carrierId        String
  serviceType      String
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @default(now()) @map("updated_at")
  activateFormat   String
  deactivateFormat String
  carrier          Carrier       @relation(fields: [carrierId], references: [id])
  userServices     UserService[]

  @@unique([carrierId, serviceType])
  @@index([carrierId])
  @@map("forwarding_codes")
}

model UserNumber {
  id          String        @id @default(cuid())
  userId      String        @unique
  telyxNumber String        @unique
  userName    String?       @db.Text
  aiGreeting  String?       @db.Text // Initial AI greeting message
  aiContext   String?       @db.Text // Context information for AI
  aiQuestions String?       @db.Text // Context information for AI
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @map("updated_at")
  carrierId   String
  countryId   String
  carrier     Carrier       @relation(fields: [carrierId], references: [id])
  country     Country       @relation("CountryToUserNumber", fields: [countryId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  services    UserService[]
  Message     Message[]
  Document    Document[]
  aiConfigId  String?
  aiConfig    AIConfig?     @relation(fields: [aiConfigId], references: [id])

  @@index([carrierId])
  @@index([countryId])
  @@map("user_numbers")
}

model UserService {
  id               String         @id @default(cuid())
  userNumberId     String
  carrierId        String
  forwardingCodeId String
  gsmCode          String
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @default(now()) @map("updated_at")
  isActive         Boolean        @default(false)
  lastDialed       DateTime?
  carrier          Carrier        @relation(fields: [carrierId], references: [id])
  forwardingCode   ForwardingCode @relation(fields: [forwardingCodeId], references: [id])
  userNumber       UserNumber     @relation(fields: [userNumberId], references: [id], onDelete: Cascade)

  @@unique([userNumberId, carrierId, forwardingCodeId])
  @@index([userNumberId])
  @@index([carrierId])
  @@index([forwardingCodeId])
  @@map("user_services")
}

model FailedPurchase {
  id           String   @id @default(cuid())
  userId       String
  twilioNumber String
  carrierId    String
  countryId    String
  error        String
  createdAt    DateTime @default(now()) @map("created_at")
  resolved     Boolean  @default(false)

  @@map("failed_purchases")
}

model FailedServices {
  id           String   @id @default(cuid())
  userNumberId String
  error        String
  createdAt    DateTime @default(now())
  resolved     Boolean  @default(false)

  @@map("failed_services")
}

model VerifiedNumber {
  id        String   @id @default(cuid())
  userId    String   @unique
  number    String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verified_numbers")
}

model Message {
  id           String        @id @default(cuid())
  telyxNumber  String
  callerName   String
  callerNumber String
  purpose      String
  location     String
  message      String        @db.Text
  status       MessageStatus @default(UNREAD)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  userNumber   UserNumber    @relation(fields: [telyxNumber], references: [telyxNumber], onDelete: Cascade)

  @@index([telyxNumber])
  @@map("messages")
}

enum UserRole {
  ADMIN
  USER
}

model NotificationPreferences {
  id                   String   @id @default(cuid())
  userId               String   @unique
  messageNotifications Boolean  @default(true)
  firebaseDeviceToken  String?
  pushSubscription     String?  @db.Text // Store the push subscription JSON
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model Document {
  id          String     @id @default(cuid())
  name        String
  s3Key       String
  vectorId    String? // Upstash reference
  status      DocStatus  @default(PENDING)
  telyxNumber String
  userNumber  UserNumber @relation(fields: [telyxNumber], references: [telyxNumber], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([telyxNumber])
  @@map("documents")
}

enum DocStatus {
  PENDING
  PROCESSING
  READY
  FAILED
}

model AIConfig {
  id          String       @id @default(cuid())
  userId      String
  name        String      
  greeting    String      @db.Text
  context     String      @db.Text
  questions   String?     @db.Text  // Changed to optional
  agentId     String      @unique  // Simple unique field, no default
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userNumbers UserNumber[]

  @@index([userId])
  @@map("ai_configs")
}
